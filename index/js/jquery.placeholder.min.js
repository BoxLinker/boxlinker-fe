/* HTML5 Placeholder jQuery Plugin - v2.1.2
 * Copyright (c)2015 Mathias Bynens
 * 2015-06-09
 */
!(function(a) {
  typeof define === 'function' && define.amd
    ? define(['jquery'], a)
    : a(
        typeof module === 'object' && module.exports
          ? require('jquery')
          : jQuery,
      );
})(a => {
  function b(b) {
    let c = {},
      d = /^jQuery\d+$/;
    return a.each(b.attributes, (a, b) => {
      b.specified && !d.test(b.name) && (c[b.name] = b.value);
    }), c;
  }
  function c(b, c) {
    let d = this,
      f = a(d);
    if (d.value == f.attr('placeholder') && f.hasClass(m.customClass))
      if (f.data('placeholder-password')) {
        if (
          (
            (f = f
              .hide()
              .nextAll('input[type="password"]:first')
              .show()
              .attr('id', f.removeAttr('id').data('placeholder-id'))),
            b === !0
          )
        )
          return (f[0].value = c);
        f.focus();
      } else
        (d.value = ''), f.removeClass(m.customClass), d == e() && d.select();
  }
  function d() {
    let d,
      e = this,
      f = a(e),
      g = this.id;
    if (e.value === '') {
      if (e.type === 'password') {
        if (!f.data('placeholder-textinput')) {
          try {
            d = f.clone().prop({ type: 'text' });
          } catch (h) {
            d = a('<input>').attr(a.extend(b(this), { type: 'text' }));
          }
          d
            .removeAttr('name')
            .data({ 'placeholder-password': f, 'placeholder-id': g })
            .bind('focus.placeholder', c), f
            .data({ 'placeholder-textinput': d, 'placeholder-id': g })
            .before(d);
        }
        f = f
          .removeAttr('id')
          .hide()
          .prevAll('input[type="text"]:first')
          .attr('id', g)
          .show();
      }
      f.addClass(m.customClass), (f[0].value = f.attr('placeholder'));
    } else f.removeClass(m.customClass);
  }
  function e() {
    try {
      return document.activeElement;
    } catch (a) {}
  }
  let f,
    g,
    h =
      Object.prototype.toString.call(window.operamini) == '[object OperaMini]',
    i = 'placeholder' in document.createElement('input') && !h,
    j = 'placeholder' in document.createElement('textarea') && !h,
    k = a.valHooks,
    l = a.propHooks;
  if (i && j)
    (g = a.fn.placeholder = function() {
      return this;
    }), (g.input = g.textarea = !0);
  else {
    var m = {};
    (g = a.fn.placeholder = function(b) {
      const e = { customClass: 'placeholder' };
      m = a.extend({}, e, b);
      const f = this;
      return f
        .filter(`${i ? 'textarea' : ':input'}[placeholder]`)
        .not(`.${m.customClass}`)
        .bind({ 'focus.placeholder': c, 'blur.placeholder': d })
        .data('placeholder-enabled', !0)
        .trigger('blur.placeholder'), f;
    }), (g.input = i), (g.textarea = j), (f = {
      get(b) {
        let c = a(b),
          d = c.data('placeholder-password');
        return d
          ? d[0].value
          : c.data('placeholder-enabled') && c.hasClass(m.customClass)
            ? ''
            : b.value;
      },
      set(b, f) {
        let g = a(b),
          h = g.data('placeholder-password');
        return h
          ? (h[0].value = f)
          : g.data('placeholder-enabled')
            ? (
                f === ''
                  ? ((b.value = f), b != e() && d.call(b))
                  : g.hasClass(m.customClass)
                    ? c.call(b, !0, f) || (b.value = f)
                    : (b.value = f),
                g
              )
            : (b.value = f);
      },
    }), i || ((k.input = f), (l.value = f)), j ||
      ((k.textarea = f), (l.value = f)), a(() => {
      a(document).delegate('form', 'submit.placeholder', function() {
        const b = a(`.${m.customClass}`, this).each(c);
        setTimeout(() => {
          b.each(d);
        }, 10);
      });
    }), a(window).bind('beforeunload.placeholder', () => {
      a(`.${m.customClass}`).each(function() {
        this.value = '';
      });
    });
  }
});
